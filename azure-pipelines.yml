trigger:
  - master

pr: none

pool:
  name: Hosted Ubuntu 1604

steps:
  - task: npmAuthenticate@0
    displayName: "npm Authenticate .npmrc"
    inputs:
      workingFile: .npmrc

  - task: Docker@0
    displayName: "Build an image"
    inputs:
      azureSubscription: infinitas-li-disco
      azureContainerRegistry: '{"loginServer":"discoregistryinfinitas.azurecr.io", "id" : "/subscriptions/4ebd66c4-aaad-4b1b-bb4e-740db9f1fc4d/resourceGroups/disco-production-rg/providers/Microsoft.ContainerRegistry/registries/discoregistryinfinitas"}'
      includeLatestTag: true

  - bash: |
      docker images 
      echo "docker compose up"
      ERROR_UP=$((docker-compose --file ./docker/cicd/docker-compose.yml up -d ) 2>&1)

      docker ps

      until [ "`/usr/bin/docker inspect -f {{.State.Running}} fer-mar-bus`"=="true" ]; do
        echo "waiting for the container to be up"
        sleep 0.2;
      done;

      docker exec fer-mar-bus sh -c "npm run test-ci"

      docker cp fer-mar-bus:/usr/src/app/test-results.xml ./

      echo "docker compose down"
      ERROR_DOWN=$((docker-compose --file ./docker/cicd/docker-compose.yml down) 2>&1)

      echo "ERROR_UP=$ERROR_UP"
      echo "ERROR_DOWN=$ERROR_DOWN"
    failOnStderr: false
    displayName: "Bash Script"

  - task: PublishTestResults@2
    displayName: "Publish Test Results **/test-*.xml"
    inputs:
      testResultsFiles: "**/test-*.xml"
      failTaskOnFailedTests: true

  - task: Docker@0
    displayName: "Push an image"
    inputs:
      azureSubscription: infinitas-li-disco
      azureContainerRegistry: '{"loginServer":"discoregistryinfinitas.azurecr.io", "id" : "/subscriptions/4ebd66c4-aaad-4b1b-bb4e-740db9f1fc4d/resourceGroups/disco-production-rg/providers/Microsoft.ContainerRegistry/registries/discoregistryinfinitas"}'
      action: "Push an image"
      includeLatestTag: true

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: drop"
    inputs:
      PathtoPublish: .helm
